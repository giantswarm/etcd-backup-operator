apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "resource.default.name" . }}
  namespace: {{ include "resource.default.namespace" . }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        releaseRevision: {{ .Release.Revision | quote }}
      labels:
        {{- include "labels.selector" . | nindent 8 }}
    spec:
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
{{- end }}
      securityContext:
        {{- with .Values.podSecurityContext }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
      restartPolicy: Always
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
        # Tolerate master taint
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule      
{{- if semverCompare ">=1.24.0" .Capabilities.KubeVersion.Version }}
        # Tolerate control-plane taint
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
{{- end }}
        # Container creates etcd backups.
        # Run container in host network mode on G8s masters
        # to be able to use 127.0.0.1 as etcd address.
        # For etcd v2 backups container should have access
        # to etcd data directory. To achive that,
        # mount /var/lib/etcd3 as a volume.
      nodeSelector:
{{- if semverCompare ">=1.24.0" .Capabilities.KubeVersion.Version }}
        node-role.kubernetes.io/control-plane: ""
{{- else }}
        node-role.kubernetes.io/master: ""
{{- end }}
      volumes:
      - name: {{ include "name" . }}-configmap
        configMap:
          name: {{ include "resource.default.name" . }}
          items:
          - key: config.yml
            path: config.yml
      - name: etcd-datadir
        hostPath:
          path: "{{ .Values.etcdDataDir }}"
      - name: etcd-certs
        hostPath:
          path: {{ .Values.clientCertsDir }}
      serviceAccountName: {{ include "resource.default.name" . }}
      containers:
      - name: {{ include "name" . }}
        image: "{{ .Values.registry.domain }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        args:
        - daemon
        - --config.dirs=/var/run/{{ include "name" . }}/configmap/
        - --config.files=config
        volumeMounts:
        - mountPath: /var/lib/etcd
          name: etcd-datadir
        - mountPath: /certs
          name: etcd-certs
        - name: {{ include "name" . }}-configmap
          mountPath: /var/run/{{ include "name" . }}/configmap/
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "resource.default.name" . }}
                key: ETCDBACKUP_AWS_ACCESS_KEY
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "resource.default.name" . }}
                key: ETCDBACKUP_AWS_SECRET_KEY
          - name: ENCRYPTION_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "resource.default.name" . }}
                key: ETCDBACKUP_ENCRYPTION_PASSWORD
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.service.port }}
          initialDelaySeconds: 30
          timeoutSeconds: 1
        securityContext:
          {{- with .Values.securityContext }}
            {{- . | toYaml | nindent 10 }}
          {{- end }}
        resources:
          requests:
            cpu: 100m
            memory: 400Mi
          limits:
            cpu: 100m
            memory: 1Gi
